console.log("starting a2sketch webserver, 0.12")


// "fill", "fillStyle", "fillWeight",
// "hachureAngle", "hachureGap",
// "stroke", "strokeWidth",
// "bowing", "roughness", "simplification"
const roughjs_options = {
    "fillWeight": 5,
    "roughness": 1.4,
    "strokeWidth": 2,
    "simplification": 1,
}
const fontSize = "120%"
// const fontSize = "1em"
// const fontSize = 18

const fs = require('fs')
const util = require("util")
const _ = require("underscore")._
const xpath = require('xpath');
const dom = require('xmldom').DOMParser;
const select = xpath.useNamespaces({"x": "http://www.w3.org/2000/svg"});
const serializer = require('xmldom').XMLSerializer
const s = new serializer()

const { createSVGWindow } = require('svgdom')
const { SVG, registerWindow } = require('@svgdotjs/svg.js')

const rough = require("roughjs")

Math.seed = (s) =>
    () => { s = Math.sin(s) * 10000; return s - Math.floor(s); };

const SVGO = require("svgo")
const svgo = new SVGO({
        js2svg: {
            pretty: true
        },
        plugins: [{
             cleanupAttrs: true,
        }, { removeDoctype: true,
        }, { removeXMLProcInst: true,
        }, { removeComments: true,
        }, { removeMetadata: true,
        }, { removeTitle: true,
        }, { removeDesc: true,
        }, { removeUselessDefs: true,
        }, { removeEditorsNSData: true,
        }, { removeEmptyAttrs: true,
        }, { removeHiddenElems: false,
        }, { removeEmptyText: true,
        }, { removeEmptyContainers: true,
        }, { removeViewBox: true,
        }, { cleanUpEnableBackground: true,
        }, { minifyStyles: true,
        }, { convertStyleToAttrs: true,
        }, { convertColors: true,
        }, { convertPathData: false,
        }, { convertTransform: true,
        }, { removeUnknownsAndDefaults: false,
        }, { removeNonInheritableGroupAttrs: true,
        }, { removeUselessStrokeAndFill: true,
        }, { removeUnusedNS: true,
        }, { cleanupIDs: false,
        }, { cleanupNumericValues: true,
        }, { moveElemsAttrsToGroup: false,
        }, { moveGroupAttrsToElems: true,
        }, { collapseGroups: true,
        }, { removeRasterImages: true,
        }, { mergePaths: true,
        }, { convertShapeToPath: true,
        }, { sortAttrs: true,
        }, { transformsWithOnePath: true,
        }, { removeDimensions: false,
        }, {
          prefixIds: {
            delim: "-",
            prefix: function (node, extra) {
              return extra.prefix;
            },
          },
        },]
      });
        // removeAttrs: {attrs: '(stroke|fill)'},

function collectAttrs(node, attrs) {
    attrs = attrs || {}
    if (node.tagName === "svg") {
        return attrs
    }
    _.each(node.attributes, (a) => {
        if (a.name != "id") {
            if (!(a.name in attrs)) {
                if (a.value !== "none") {
                    //console.log(a.name, ":", a.value)
                    attrs[a.name] = a.value
                }
            }
        }
    })
    return collectAttrs(node.parentNode, attrs)
}

var uniqueId = function() {
  return Math.random().toString(36).substr(2, 16);
};

async function convertSvgToSketch(svg, seed, id, hideFilledPathes) {
    if (svg[0] != "<") {
        return ""
    }
    seed = seed || 42
    id = id || undefined
    hideFilledPathes = hideFilledPathes || false

    Math.random = Math.seed(seed)

    const svg_optimized = await svgo.optimize(svg);
    const doc = new dom().parseFromString(svg_optimized.data, "svg+xml");
    const width = parseInt(1 * select("/x:svg/@width", doc)[0].value)
    const height = parseInt(1 * select("/x:svg/@height", doc)[0].value)

    const window = createSVGWindow()
    const document = window.document
    registerWindow(window, document)

    const roughSvg = rough.svg(document.documentElement, roughjs_options)

    const nodes = select("//x:g/x:path", doc)
    for (let i=0; i<nodes.length; i++) {
        let d = nodes[i].attributes.getNamedItem("d")
        try {
            let p = roughSvg.path(d.value, Object.assign({}, collectAttrs(nodes[i]), roughjs_options))
            document.documentElement.appendChild(p)
        } catch(error) {
            console.log(error)
            console.log(d.value)
            console.log(collectAttrs(nodes[i]))
        }
    };

    // copy non-rough elements, like markers... TODO
    const defs = s.serializeToString(select("/x:svg/x:defs", doc)[0])

    const markers = s.serializeToString(select("//x:g[@id='lines']", doc)[0])
    const new_canvas = SVG(document.documentElement).size(width, height)
    let result = new_canvas.svg()
    result = result.replace("</svg>", defs + markers + "</svg>")
    const result_doc = new dom().parseFromString((await svgo.optimize(result)).data, "svg+xml");

    const suffix = "-" + uniqueId()

    _.each(select("//x:svg/x:defs/x:marker", result_doc), (elem) => {
        elem.setAttribute("id", elem.getAttribute("id") + suffix)
    })

    _.each(select("//x:svg/x:g[@id='lines']", result_doc), (lines_elem) => {
        lines_elem.setAttribute("id", "lines" + suffix)
        _.each(select("//x:g/x:path", lines_elem), (line_elem) => {
            if (line_elem.hasAttribute("marker-start")) {
                line_elem.setAttribute("marker-start", line_elem.getAttribute("marker-start").slice(0, -1) + suffix + ")")
            }
            if (line_elem.hasAttribute("marker-end")) {
                line_elem.setAttribute("marker-end", line_elem.getAttribute("marker-end").slice(0, -1) + suffix + ")")
            }
        })
    })

    if (hideFilledPathes) {
        _.each(select("//x:path/@fill", result_doc), (attr) => {
            if (attr.value && attr.value != 'none') {
                attr.ownerElement.setAttribute("display", "none")
            }
        })
    }

    if (id != undefined) {
        result_doc.documentElement.setAttribute("id", id)
    }

    _.each(select("//x:g/x:text", doc), (te) => {
        te.setAttribute("font-family", "xkcd Script")
        te.setAttribute("font-size", fontSize)
        result_doc.documentElement.appendChild(te)
    })

    return await svgo.optimize(s.serializeToString(result_doc))
}

async function convertAsciiToSvg(text) {
    let fsync = require('sync-files')
    fsync("/custom-types",
        "/asciitosvg/objects/",
        {"watch": false, "delete": false, "depth": 10},
        function(event, data) {
            if (event === "no-delete") {
                return;
            }
            let exec = require('child_process').execSync
            exec('touch /asciitosvg/objects/')
        }
    )

    let exec = require('child_process').execSync
    let svg = exec('/usr/bin/php /asciitosvg/a2s', {input: text}).toString()
    return await svgo.optimize(svg, {
      prefix: uniqueId(),
    });
    // return {data: svg}
}


const express = require('express');
const app = express();
const bodyParser = require('body-parser')
app.use(bodyParser.text({ inflate: true, limit: '10mb', type: 'text/svg+xml' }));
app.use(bodyParser.text({ inflate: true, limit: '10mb', type: 'text/plain' }));
app.use(bodyParser.text({ inflate: true, limit: '10mb', type: 'application/x-www-form-urlencoded' }));

app.post('/s2sketch', function(req, res){
    try {
        convertSvgToSketch(req.body, req.query.seed, req.query.id, req.query.hideFilledPathes == 'true').then((result) => {
            res.set('Content-Type', 'text/svg+xml')
            res.status(200).send(result.data)
        })
        console.log("s2sketch successfull")
    } catch(error) {
        console.error(error)
        res.status(500).send(error)
    }
});

app.post('/a2svg', function(req, res){
    try {
        convertAsciiToSvg(req.body)
            .then((result) => {
                res.set('Content-Type', 'text/svg+xml')
                res.status(200).send(result.data)})
            .catch((error) => {
                console.log("ERROR")
                console.log(error)
            })
        console.log("a2svg successfull")
    } catch(error) {
        console.error(error)
        res.status(500).send(error)
    }
});

app.post('/a2sketch', function(req, res){
    try {
        convertAsciiToSvg(req.body)
            .then((svg) => {
                return convertSvgToSketch(svg.data, req.query.seed, req.query.id, req.query.hideFilledPathes == 'true')
            })
            .then((sketch) => {
                res.set('Content-Type', 'text/svg+xml')
                res.status(200).send(sketch.data)
            })
            .catch((error) => {
                console.log("ERROR")
                console.log(error)
            })
        console.log("a2sketch successfull")
    } catch(error) {
        console.error(error)
        res.status(500).send(error)
    }
});

process.on('SIGINT', function() {
    console.log("Caught interrupt signal");
    process.exit();
});

port = 22753;
app.listen(port);
console.log('Listening at http://localhost:' + port)
