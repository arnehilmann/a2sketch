const fillWeight = 5
const delay = 500
const roughness = 1
const strokeWidth = 1.4

const { createCanvas, loadImage } = require('canvas')
require('canvas-5-polyfill')
const fs = require('fs')
const util = require("util")
const _ = require("underscore")._
self = this
self.document = {}
self.document.currentScript = {}
window = process
eval(fs.readFileSync("rough.js", 'utf-8'))
const xpath = require('xpath');
const dom = require('xmldom').DOMParser;
const select = xpath.useNamespaces({"x": "http://www.w3.org/2000/svg"});
const serializer = require('xmldom').XMLSerializer
const s = new serializer()

Math.seed = (s) =>
    () => { s = Math.sin(s) * 10000; return s - Math.floor(s); }

// read
//data = fs.readFileSync("sample.svg", "utf-8")

function convertSvgToSketch(svg, seed) {
    if (svg[0] != "<") {
        return ""
    }
    seed = seed || 42

    Math.random = Math.seed(seed)
    const doc = new dom().parseFromString(svg, "svg+xml");
    const width = select("/x:svg/@width", doc)[0].value
    const height = select("/x:svg/@height", doc)[0].value

    // init canvas
    const canvas = createCanvas(parseInt(width), parseInt(height), "svg")
    const rc = rough.canvas(canvas, {async: false,
                                     options: {roughness: roughness, strokeWidth: strokeWidth},
                                     noWorker: true})

    // plot
    const ctx = canvas.getContext("2d")
    // canvas-5-polyfill patches CanvasRenderingContext2D.prototype
    // lets give it one
    global.CanvasRenderingContext2D = {};
    global.CanvasRenderingContext2D.prototype = ctx;

    ctx.antialias = "gray"

    const nodes = select("//x:g/x:path", doc);
    _.each(nodes, (e) => {
        var d = e.attributes.getNamedItem("d")

        var options = {}
        // "fill", "fillStyle", "fillWeight",
        // "hachureAngle", "hachureGap",
        // "stroke", "strokeWidth",
        // "bowing", "roughness", "simplification"
        _.each(e.attributes, (attrNode) => {
            if (attrNode.name != "id") {
                options[attrNode.name] = attrNode.value
            }
        })
        rc.path(d.value, options)
    });
    require("deasync").sleep(delay)

    ctx.font = "18px xkcd script"
    _.each(select("//x:g/x:text", doc), (te) => {
        var x = select("./@x", te)[0].value
        var y = select("./@y", te)[0].value
        var fill = select("./@fill", te)[0]
        if (fill) {
            ctx.fillStyle = fill.value
        }
        var text = te.firstChild.data
        ctx.fillText(text, parseInt(x), parseInt(y))
    })

    // copy non-rough elements, like markers...
    const defs = s.serializeToString(select("/x:svg/x:defs", doc)[0])
    const markers = s.serializeToString(select("//x:g[@id='lines']", doc)[0])
    var result = canvas.toBuffer().toString()
    result = result.replace("</svg>", defs + markers + "</svg>")
    return result
}

function convertAsciiToSvg(text) {
    var exec = require('child_process').execSync
    return exec('a2s -i- -o-', {input: text}).toString()
}

/*
var data = fs.readFileSync("examples/logo-sketch.a2s", "utf-8")
var svg = convertAsciiToSvg(data)
fs.writeFileSync("examples/test.svg", svg)
var sketch = convertSvgToSketch(svg, 42)
fs.writeFileSync("examples/test.sketch.svg", sketch)
process.exit()
*/

const express = require('express');
const app = express();
const bodyParser = require('body-parser')
app.use(bodyParser.text({ inflate: true, limit: '10mb', type: 'text/svg+xml' }));
app.use(bodyParser.text({ inflate: true, limit: '10mb', type: 'text/plain' }));
app.use(bodyParser.text({ inflate: true, limit: '10mb', type: 'application/x-www-form-urlencoded' }));

app.post('/s2sketch', function(req, res){
    try {
        var result = convertSvgToSketch(req.body, req.query.seed)
        res.set('Content-Type', 'text/svg+xml')
        res.status(200).send(result)
    } catch(error) {
        console.log(error)
        res.status(500).send(error)
    }
});

app.post('/a2svg', function(req, res){
    var svg = convertAsciiToSvg(req.body)
    res.set('Content-Type', 'text/svg+xml')
    res.status(200).send(svg)
});

app.post('/a2sketch', function(req, res){
    if (req._body) {
        var svg = convertAsciiToSvg(req.body)
        var sketch = convertSvgToSketch(svg, req.query.seed)
        res.set('Content-Type', 'text/svg+xml')
        res.status(200).send(sketch)
    } else {
        res.status(400).end("empty body?!")
    }
});

process.on('SIGINT', function() {
    console.log("Caught interrupt signal");
    process.exit();
});

port = 22753;
app.listen(port);
console.log('Listening at http://localhost:' + port)
